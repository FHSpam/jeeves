; Copy this template to define an Option
;
; The option thus defined will be useable in the definition of a command.
; (this happens in the conf (ini) file of the command).
; Options defined in <app>/options are 'common' to all commands i.e. they 
; will behave in the same way (share the same characteristics defined here)
; It is however possible to customize an option for a particular command
; (i.e. have that option behave differently when that command is used)
; through an 'overloading'/'overriding' mechanism : see examples given in specific
; commands.
; -----------------------------------------------------------------------------


; Id of option - Used to reference the option uniquely, e.g. in the command conf file
; That's why we're using an id rather than the name. The name of the option
; is what is displayed in the help so it's liable to change.
; The idea is that the id on the other hand should not change.
; Required.
id   = option-id

; Name of the option as it appears in help
; Required.
name = my-option

; Required
shortcut = d

; Does the option expect values? etc.
; Use constants (names of) of class \Symfony\Component\Console\Input\InputOption, seperated by |
; See http://symfony.com/doc/current/components/console/introduction.html
; Nota: for values containing other characters than alphanumerical, it is best to surround them with double-quotes ("")
; Required
mode = VALUE_REQUIRED

; Used to display help when user does command -h
; May be layed out on several lines, using double quotes ("")
; Optional
help =  "Possibly
on
several lines"

; Prompt user to input a value if none given?
; Possible values = true, false
; TODO User can input multiple values by TODO define format
; Optional
prompt_if_none     = true
prompt_if_none_msg = "No value was given for this option. You may input a value (if empty, default settings will apply)"


; Default value if no value passed, if option expects value
; If option expects a value, and no default is given, and user gives none, command will fail
; Optional
default = this_is_the_default_value

; Ask the user for confirmation message before using the default value?
; Possible values = true, false
; Optional
ask_confirmation_before_default     = true
ask_confirmation_before_default_msg = "No value specified, applying default value".

; If these values are passed, user will be asked to confirm
; Possible values : any, separated by a comma (,). Use ! to negate (TODO)
; Nota: for values containing other characters than alphanumerical, it is best to surround them
; with double-quotes ("")
; Keep message short (Boilerplate like "Do you confirm? [YN]" is added automatically)
; Optional
ask_confirmation_when_values     = staging, prod
ask_confirmation_when_values_msg = "Critical value specified. Do you confirm?"