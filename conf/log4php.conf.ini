;	<!-- APPENDERS (i.e. outputs)  -->
;	<!-- ========================== -->
;
;	<!--  The chosen layout conversion pattern is designed to facilitate log file post-processing (search, grep, filtering ...)
;	      Elements used:
;	        [D:<date>]
;	        [N:<name of logger>]
;	        [C:<contextual info, e.g. UN: name of user, RA: remote address...>]
;	        [L:<debug level>]
;	        [O:<occurred at (place in code (class, method, line) where log occurred)>]
;	        [M:<message>]
;	      Patterns (memo):
;	        %C   : whole class name
;	        %C{1}: short class name
;	        %c   : logger name (aka "category")
;	        %c{n}: n last dot-separated name-components of logger name
;	        %-5p : log level, width of 5 characters
;	-->

;NB : defining the appender "STDOUT" will yield an error

; Appender on standard output (will output logs if PHP called in CLI mode)
; --------------------------------
log4php.appender.STD_OUT                          = LoggerAppenderConsole
log4php.appender.STD_OUT.layout                   = LoggerLayoutPattern

; Moderately verbose pattern:
log4php.appender.STD_OUT.layout.conversionPattern = [L:%-5p][O:%C{1},%M,%L] - %m %n


; Appender in a general log file
; -------------------------------
log4php.appender.LOG_FILE                          = LoggerAppenderFile

; file path is relative to where Logger::configure() is called
log4php.appender.LOG_FILE.file                     = logs.log
log4php.appender.LOG_FILE.append                   = true
log4php.appender.LOG_FILE.layout                   = LoggerLayoutPattern

; More verbose pattern : outputs : date, IP address, logger name, log level, class, method, line, message
log4php.appender.LOG_FILE.layout.conversionPattern = [D:%d{Y-m-d H:i:s,u}][I:%s{REMOTE_ADDR}][N:%c{3}][L:%-5p][O:%C{1},%M,%L][M:%m]%n






;	<!-- LOGGERS  (aka "categories" ) -->
;	<!-- ===========================  -->
;
;	<!-- Loggers inherit from "ancestors" as defined by the package-style name
;	     "root" is the ancestor of all loggers.
;	-->

log4php.rootLogger                                  = INFO, STD_OUT
log4php.logger.fhibox.jeeves.core.Option            = INFO, STD_OUT
log4php.logger.fhibox.jeeves.core.Argument          = INFO, STD_OUT
log4php.logger.fhibox.jeeves.core.AppCommand        = INFO, STD_OUT


; additivity indicates if child loggers inherit their parent's appenders
; => if additivity = true, then logger will log as himself and also as rootLogger
log4php.additivity.DnsClientAws                           = false

